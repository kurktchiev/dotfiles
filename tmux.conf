# Change prefix key to C-a, easier to type, same to "screen"
unbind C-b
set -g prefix C-a

# Allow Ctrl+a to be passed to the terminal
bind a send-prefix

# ==========================
# ===  General settings  ===
# ==========================
# Set the default $TERM
set -g default-terminal "tmux-256color"
set -gw xterm-keys on
set -qg status-utf8 on
setw -qg utf8 on

# Enable True Colors
set -ga terminal-overrides ",*:Tc"

set -g @copy_use_osc52_fallback on

# Set the maximum number of lines held in window history. TODO: find a way to do get "unlimited"
set -g history-limit 500000

# Set the amount of paste-buffers to store, basically your paste-history
set -g buffer-limit 500000

# Wait time to decide if you are doing a tmux shortcut or not.
set -sg escape-time 10

# Set the amount of time for which status line messages and other on-screen indicators are displayed
set -g display-time 1500

# prevent tmux from closing a window (pane) when the process running it ends
set -g remain-on-exit off

# Allow multiple commands to be entered without pressing the prefix-key again in the
set -g repeat-time 500

# Re-number the windows as you open/close new windows
set -g renumber-windows on

# Allow the windows to be renamed
setw -g allow-rename on

# Do NOT rename the windows automatically, eg change the name to the current process
setw -g automatic-rename off

# This means that tmux will resize the window to the size of the smallest or largest session (see the window-size option) for
# which it is the current window, rather than the session to which it is attached.
# The window may resize when the current window is changed on another session
setw -g aggressive-resize on
# Quick hack to disable aggresive-resize if we are using iTerm
if-shell -b '[ "$LC_TERMINAL" = "iTerm2" ]' 'setw -g aggressive-resize off'

# Set the clock to 24h format
set -g clock-mode-style 24

# Start index of window/pane with 1
set -g base-index 1
setw -g pane-base-index 1

# Enable mouse support
set -g mouse on

# ==========================
# ===   Key bindings     ===
# ==========================

# Unbind default key bindings, we're going to override
unbind "\$" # rename-session
unbind ,    # rename-window
unbind %    # split-window -h
unbind '"'  # split-window
unbind "\}" # swap-pane -D
unbind "\{" # swap-pane -U
unbind "\[" # paste-buffer
unbind "\]"
unbind "'"  # select-window
unbind n    # next-window
unbind p    # previous-window
unbind l    # last-window
unbind M-n  # next window with alert
unbind M-p  # next window with alert
unbind o    # focus thru panes
unbind &    # kill-window
unbind "#"  # list-buffer
unbind =    # choose-buffer
unbind z    # zoom-pane
unbind M-Up  # resize 5 rows up
unbind M-Down # resize 5 rows down
unbind M-Right # resize 5 rows right
unbind M-Left # resize 5 rows left

# Edit configuration and reload
bind C-e new-window -n 'tmux.conf' "sh -c '\${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"Config reloaded\"'"

# Reload tmux configuration
bind C-r source-file ~/.tmux.conf \; display "Config reloaded"

# new window and retain cwd
bind -n M-t new-window -c "#{pane_current_path}"

# Prompt to rename window right after it's created
#set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# Rename session and window
bind r command-prompt -I "#{window_name}" "rename-window '%%'"

# Split panes
bind -nr M-d split-window -h -c "#{pane_current_path}"
bind -nr M-D split-window -v -c "#{pane_current_path}"

# Select pane and windows
bind -nr M-Left previous-window
bind -nr M-Right next-window
bind -nr M-S-Left select-pane -L
bind -nr M-S-Right select-pane -R
bind -nr M-S-Up select-pane -U
bind -nr M-S-Down select-pane -D
bind -r Tab last-window   # cycle thru MRU tabs

# Zoom pane
bind -n M-Enter resize-pane -Z

# Kill pane/window/session shortcuts
bind -nr M-w kill-pane
bind -nr M-W kill-window
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Detach from session
bind d detach

# Hide status bar on demand
bind C-s if -F '#{s/off//:status}' 'set status off' 'set status on'

# Set sync input on/off
bind -n M-I set-window-option synchronize-panes

#TODO: The below tries to play around with changing the background to something non-standard when sync is on
# if -b '$(tmux show-window-options -t nl-cluster synchronize-panes | cut -d " " -f2) = "on"' 'tmux setw -t nl-cluster window-active-style "fg=$color_white,bg=colour088" && tmux setw -t nl-cluster window-style "fg=$color_white,bg=colour052"' 'tmux setw -t nl-cluster window-style "fg=$color_white,bg=$color_dark_grey" && tmux setw -t nl-cluster window-active-style "fg=$color_white,bg=$color_black"'

# ==================================================
# === Window monitoring for activity and silence ===
# ==================================================
# Activity bell and whistles
set -g visual-activity off
set -g monitor-activity on
set -g visual-silence off
set -g visual-bell off
setw -g bell-action other

# ================================================
# ===     Copy mode, scroll and clipboard      ===
# ================================================
# Prefer vi style key table
setw -g mode-keys vi

# Copy mode configuration
bind -n M-Up copy-mode

# Scroll up/down by 1 line, half screen, whole screen
bind -T copy-mode-vi M-Up              send-keys -X scroll-up
bind -T copy-mode-vi M-Down            send-keys -X scroll-down
bind -T copy-mode-vi M-PageUp          send-keys -X halfpage-up
bind -T copy-mode-vi M-PageDown        send-keys -X halfpage-down
bind -T copy-mode-vi PageDown          send-keys -X page-down
bind -T copy-mode-vi PageUp            send-keys -X page-up

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "1" (default is 5)
bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 1 scroll-up
bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 1 scroll-down

run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'
run -b 'tmux bind -t vi-copy L end-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'

# copy to macOS clipboard
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | pbcopy"'
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - > /dev/clipboard"'

# buffer manipulations
bind b list-buffers  # list paste buffers
bind p paste-buffer  # paste from the top paste buffer
bind -n M-V choose-buffer # choose which buffer to paste from

# yank="~/.tmux/yank.sh"

# Copy selected text
#bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"
#bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "$yank"
#bind -T copy-mode-vi Y send-keys -X copy-line \;\
#    run "tmux save-buffer - | $yank"
#bind-key -T copy-mode-vi D send-keys -X copy-end-of-line \;\
#    run "tmux save-buffer - | $yank"
#bind -T copy-mode-vi C-j send-keys -X copy-pipe-and-cancel "$yank"
#bind-key -T copy-mode-vi A send-keys -X append-selection-and-cancel \;\
#    run "tmux save-buffer - | $yank"

# Copy selection on drag end event, but do not cancel copy mode and do not clear selection
# clear select on subsequence mouse click
# bind -T copy-mode-vi MouseDragEnd1Pane \
#    send-keys -X copy-pipe "$yank"
# bind -T copy-mode-vi MouseDown1Pane select-pane \;\
#    send-keys -X clear-selection

# iTerm2 works with clipboard out of the box, set-clipboard already set to "external"
# tmux show-options -g -s set-clipboard
# set-clipboard on|external

# =====================================
# ===           Theme               ===
# =====================================

# Feel free to NOT use this variables at all (remove, rename)
# this are named colors, just for convenience
color_orange="colour202"
color_purple="colour134"
color_green="colour076"
color_blue="colour039"
color_yellow="colour220"
color_red="colour160"
color_dark_red="colour088"
color_black="colour233"
color_white="colour015"
color_light_grey="colour245"
color_dark_grey="colour234"
color_magenta="colour197"

# This is a theme CONTRACT, you are required to define variables below
# Change values, but not remove/rename variables itself
color_dark="$color_black"
color_light="$color_white"
color_session_text="$color_blue"
color_status_text="$color_light_grey"
color_main="$color_orange"
color_secondary="$color_purple"
color_level_ok="$color_green"
color_level_warn="$color_yellow"
color_level_stress="$color_red"
color_window_off_indicator="$color_dark_red"
color_window_off_status_bg="$color_dark_grey"
color_window_off_status_current_bg="$color_white"

# =====================================
# ===    Appearence and status bar  ===
# =====================================
# Setting bg=default or bg=terminal should match the used berminal coloring
# for background, this is useful as that way you can keep having transperency
# and other niceties

set -g mode-style "fg=default,bg=terminal"

# command line style
set -g message-style "fg=$color_main,bg=terminal"

# status line style
set -g status-style "fg=$color_status_text,bg=terminal"

# window segments in status line
set -g window-status-separator ''

# Set parent terminal title to reflect current window in tmux session
# This controls whats show in the iTerm window/tab name
set -g set-titles on
set -g set-titles-string "#I:#W"

#      
setw -g window-status-format " #I:#W "
setw -g window-status-current-style "fg=$color_dark,bold,bg=$color_main"
setw -g window-status-current-format "#[fg=$color_main,bg=terminal]#I:#W#[fg=$color_main,bg=terminal]"
#setw -g window-status-current-format "#[fg=$color_main,bg=terminal]$separator_powerline_left#[default]#I:#W#[fg=$color_main,bg=terminal]$separator_powerline_right#[default]"

# when window has monitoring notification
setw -g window-status-activity-style "fg=$color_blue"

# outline for active pane
setw -g pane-active-border-style "fg=$color_main"

# enable pane names
#set -g pane-border-status bottom
#setw -g pane-border-format '#{pane_title}'

# set inactive/active window styles
# this is a bit confusing but window-style is the the "default" color to be used
# the active style applies on top of it. Which means, that you in order to have a differentiating
# setup, you kinda have to do it backwards by setting the "default" to the color you want your INactive pane to be
set -g window-style "fg=$color_white,bg=$color_dark_grey"
set -g window-active-style "fg=$color_white,bg=terminal"

# general status bar settings
set -g status on
set -g status-interval 1
set -g status-position bottom
set -g status-justify left
set -g status-right-length 100

# define widgets we're going to use in status bar
# note, that this is not the complete list, some of them are loaded from plugins
wg_session="#[fg=$color_dark,bold,bg=$color_magenta] #S#[fg=$color_magenta,bg=default]"
wg_is_zoomed="#[fg=$color_level_warn,bg=terminal]#{?window_zoomed_flag,ZOOMED,}#[default]"
#wg_is_synced="#[fg=$color_dark,bg=$color_level_stress]#{?pane_synchronized,[SYNCED INPUT],}#[default]"
wg_date_time=" %m-%d-%Y %H:%M "

set -g status-left "$wg_session"
set -g status-right "#{prefix_highlight} $wg_is_zoomed $wg_date_time"

# ============================
# ===       Plugins        ===
# ============================
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'pschmitt/tmux-ssh-split'
set -g @plugin 'fcsonline/tmux-thumbs'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'

# Plugin properties

# Configure tmux-prefix-highlight colors
set -g @prefix_highlight_output_prefix ''
set -g @prefix_highlight_output_suffix ''
set -g @prefix_highlight_fg "$color_secondary"
set -g @prefix_highlight_bg "terminal"
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr "fg=$color_secondary,bg=terminal"
set -g @prefix_highlight_show_sync_mode 'on'
set -g @prefix_highlight_sync_prompt ' SYNCED INPUT '
set -g @prefix_highlight_sync_mode_attr "fg=$color_level_stress,bg=terminal"

# Configure tmux-ssh-split
# TODO: this doesnt work when you are nesting sessions, might look at extending
set -g @ssh-split-keep-cwd "true"
set -g @ssh-split-fail "false"
set -g @ssh-split-no-shell "false"
set -g @ssh-split-strip-cmd "false"
set -g @ssh-split-verbose "false"
set -g @ssh-split-h-key "|"
set -g @ssh-split-v-key "_"

# Configure tmux-thumbs
set -g @thumbs-osc52 "1"
set -g @thumbs-unique "true"
set -g @thumbs-key "F"
# Example extra matches
set -g @thumbs-regexp-1 '[a-z]+@[a-z]+.com' # Match emails
set -g @thumbs-regexp-2 '[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:' # Match MAC addresses
set -g @thumbs-regexp-3 'Vlan\d+' # match Vlan interface on network devices

# Run all plugins' scripts
run '~/.tmux/plugins/tpm/tpm'
